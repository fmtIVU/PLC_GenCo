@using PLC_GenCo.ViewModels

@model PLC_GenCo.ViewModels.EditIOIOListViewModel
@{
    ViewBag.Title = "EditIO";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>IO setup</h2>



@using (Html.BeginForm("Save", "IOList"))
{

    <div class="form-group">
        @Html.LabelFor(m => m.IO.Name)
        @Html.TextBoxFor(m => m.IO.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.IO.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.IO.Comment)
        @Html.TextBoxFor(m => m.IO.Comment, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.IO.Comment)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.IO.ConnectionType)
        @Html.EnumDropDownListFor(m => m.IO.ConnectionType, "Connection select", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.IO.ConnectionType)

    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.IO.Location)
        @Html.DropDownListFor(m => m.IO.Location, new SelectList(Model.IOLocations, "Name", "Name"), "Select Location", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.IO.Location)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.IO.IOAddress.Type, "IO type")
        @Html.EnumDropDownListFor(m => m.IO.IOAddress.Type, "Select IO type", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.IO.IOAddress.Type)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.IO.IOAddress.IPorMBAddress)
        @Html.TextBoxFor(m => m.IO.IOAddress.IPorMBAddress, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.IO.IOAddress.IPorMBAddress)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.IO.IOAddress.Module)
        @Html.TextBoxFor(m => m.IO.IOAddress.Module, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.IO.IOAddress.Module)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.IO.IOAddress.Channel)
        @Html.TextBoxFor(m => m.IO.IOAddress.Channel, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.IO.IOAddress.Channel)
    </div>

    if (Model.Parents.Any())
        {
            <div class="form-group">
                @Html.LabelFor(m => m.IO.ParentName)
                @Html.DropDownListFor(m => m.IO.ParentName, new SelectList(Model.Parents, "Name", "Name"), "Select Parent", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.IO.ParentName)
            </div>
        }


    @Html.HiddenFor(m => m.IO.Id)
    @Html.HiddenFor(m => m.IO.ComponentId)

    <button type="submit" class="btn btn-primary">Confirm</button>

}
<p>
    <span style="display:inline-block; width: 20%;"></span>
    <input type="button" value="Cancel" class="btn btn-light" onclick="@("window.location.href='" + @Url.Action("Index", "IOList") + "'");" />
</p>


@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}